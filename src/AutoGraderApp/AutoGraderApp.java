package AutoGraderApp;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import static AutoGraderApp.Controller.console;

/* ======================================================================
 * AutoGraderApp class
 * ===================================================================== */
public class AutoGraderApp extends Application implements IAGConstant {

    public static AutoGrader2 autoGrader;
    public static final String appName = "Spelman AutoGrader 2";
    public static final String version = "2.0.1";
    public static final String copyrightText = "copyright 2016-2018";
    public static final String credits = "J Volcy";

    /* ======================================================================
     * start()
     * This function is automatically called after the primary stage
     * has been created.
     * This is a good place to customize the appearance of the stage.
     * ===================================================================== */
    @Override
    public void start(Stage primaryStage) throws Exception {
        console("start...");

        //Parent root = FXMLLoader.load(getClass().getResource("AutoGraderApp.fxml"));
        FXMLLoader loader = new FXMLLoader(getClass().getResource("AutoGraderApp.fxml"));
        Parent root = loader.load();

        // Get the Controller from the FXMLLoader
        //Controller controller = loader.getController();
        //controller.setGradingEngine(autoGrader.getGradingEngine());
        //controller.setAutoGraderRef(autoGrader);

        primaryStage.setTitle("Spelman AutoGrader 2");
        primaryStage.setScene(new Scene(root, MIN_STAGE_WIDTH, MIN_STAGE_HEIGHT));
        primaryStage.setMinWidth(MIN_STAGE_WIDTH);
        primaryStage.setMinHeight(MIN_STAGE_HEIGHT);

        primaryStage.show();
    }

    /* ======================================================================
     * main()
     * Entry point into the application.
     * ===================================================================== */
    public static void main(String[] args) {

        console("main...");
        autoGrader = new AutoGrader2();

        console("launching...");
        //---------- start the GUI ----------
        launch(args);

        //---------- Commit the AG options to the JSON file ----------
        autoGrader.saveConfiguration();

        console("Exiting main()...");
    }


    /* ======================================================================
     * Help HTML string
     * ===================================================================== */
    public static final String HelpHtml = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">&#10;<html><head>&#10;  &#10;  <meta name=\"Title\" content=\"\">&#10;&#10;  &#10;  <meta name=\"Keywords\" content=\"\">&#10;&#10;  &#10;  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=macintosh\">&#10;&#10;  &#10;  <meta name=\"Generator\" content=\"Microsoft Word 15 (filtered)\">&#10;&#10;  &#10;  <style>&#10;<!--&#10; /* Font Definitions */&#10;@font-face&#10;&#9;{font-family:Arial;&#10;&#9;panose-1:2 11 6 4 2 2 2 2 2 4;}&#10;@font-face&#10;&#9;{font-family:\"Cambria Math\";&#10;&#9;panose-1:2 4 5 3 5 4 6 3 2 4;}&#10;@font-face&#10;&#9;{font-family:Calibri;&#10;&#9;panose-1:2 15 5 2 2 2 4 3 2 4;}&#10; /* Style Definitions */&#10;p.MsoNormal, li.MsoNormal, div.MsoNormal&#10;&#9;{margin:0in;&#10;&#9;margin-bottom:.0001pt;&#10;&#9;font-size:12.0pt;&#10;&#9;font-family:Calibri;}&#10;p.MsoHeader, li.MsoHeader, div.MsoHeader&#10;&#9;{margin:0in;&#10;&#9;margin-bottom:.0001pt;&#10;&#9;font-size:12.0pt;&#10;&#9;font-family:Calibri;}&#10;p.MsoFooter, li.MsoFooter, div.MsoFooter&#10;&#9;{margin:0in;&#10;&#9;margin-bottom:.0001pt;&#10;&#9;font-size:12.0pt;&#10;&#9;font-family:Calibri;}&#10;p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph&#10;&#9;{margin-top:0in;&#10;&#9;margin-right:0in;&#10;&#9;margin-bottom:0in;&#10;&#9;margin-left:.5in;&#10;&#9;margin-bottom:.0001pt;&#10;&#9;font-size:12.0pt;&#10;&#9;font-family:Calibri;}&#10;.MsoChpDefault&#10;&#9;{font-family:Calibri;}&#10; /* Page Definitions */&#10;@page WordSection1&#10;&#9;{size:8.5in 11.0in;&#10;&#9;margin:1.0in 1.0in 1.0in 1.0in;}&#10;div.WordSection1&#10;&#9;{page:WordSection1;}&#10; /* List Definitions */&#10;ol&#10;&#9;{margin-bottom:0in;}&#10;ul&#10;&#9;{margin-bottom:0in;}&#10;-->&#10;  </style>&#10;</head><body style=\"background-color: white;\" lang=\"EN-US\">&#10;<div class=\"WordSection1\">&#10;<div style=\"text-align: center;\"><b><span style=\"font-size: 18pt; color: rgb(0, 112, 192);\">Spelman AutoGrader 2</span></b>&#10;<br>&#10;</div>&#10;&nbsp;&#10;<br>&#10;<span style=\"font-size: 14pt; color: rgb(0, 112, 192);\"><big>Introduction</big> </span>&#10;<br>&#10;The Spelman AutoGrader 2 program is designed to help grade&#10;Python and C++ programs submitted through Moodle.&nbsp; To use the&#10;program,&#10;perform a 'download all submissions' of the target assignment from&#10;Moodle. &nbsp;Extract&#10;the downloaded zip file.&nbsp; This will create a directory on disk&#10;that holds&#10;all student submissions.&nbsp; We will call this directory our&#10;'top-level&#10;directory' (TLD).&nbsp; The TLD should contain as many sub-directories&#10;as there&#10;are submitted assignments.&nbsp; The names of these sub-directories&#10;should be&#10;formatted as “student name_assignment”.&nbsp; If your TLD does not&#10;contain&#10;sub-directories, please see the section on&nbsp; <a href=\"#moodle_download_settings\">Moodle Download Settings</a>.<br>&nbsp;<br>&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;The individual student directories may contain program files&#10;(*.cpp, *.h, *.py, etc) zip files (*.zip) or subdirectories.&nbsp; The&#10;AutoGrader first searches for zip files.&nbsp; If any are found and the&#10;auto-uncompress option is selected, these are uncompressed into&#10;subdirectories&#10;with the same names as the zip files.&nbsp; The AutoGrader next&#10;searches for programming files.&nbsp; For each student submission, this&#10;search begins in the individual submission directory and continues&#10;recursively&#10;through sub-directories until a programming file is found.&nbsp; If a&#10;programming language is specified, the AutoGrader looks for programming&#10;files&#10;for that language only.&nbsp; If the programming language is set to&#10;“Auto”&#10;(recommended), the AutoGrader searches for any programming files and&#10;attempts&#10;to classify the submission as a Python or C++ program.&#10;&#10;<br>&#10;&#10;&nbsp;&#10;&#10;<br>&#10;&#10;For C++, one (and only one) of the multiple source files&#10;should contain a main().&nbsp; For Python, the top-level module must be&#10;identified&#10;among the multiple .py files.&nbsp; By default, AutoGrader assumes that&#10;top-level Python modules are named 'main.py'.&nbsp; For this reason, it&#10;is&#10;advisable to instruct students to name their top-level Python modules&#10;'main.py'&#10;when submitting multi-file projects.&nbsp; If multiple Python files are&#10;found and none are named 'main.py', the AutoGrader will prompt you to&#10;select which of the multiple files is the top level file.<br>&#10;&#10;<span style=\"font-size: 14pt; color: rgb(0, 112, 192);\"></span><br>The&#10;AutoGrader UI is organized by a set of numbered buttons at the top of&#10;the screen.&nbsp; The buttons are labeled \"0-Settings\", \"1-Input/Setup\"&#10;and \"2-Output\".&nbsp; A 4th button labeled \"Console\" is for process&#10;tracking and debugging grading mishaps.&nbsp; The numbered buttons&#10;suggest the order of operations.&nbsp; On startup, you will be on the&#10;\"1 - Input/Setup\" screen corresponding to Button 1.&nbsp; You will&#10;probably need to use Button 0, \"Settings\", only once, the first time&#10;you launch AutoGrader 2 to configure the program.&nbsp; The&#10;configuration options are described in the \"<a href=\"#configuration_options\">Configuration Options</a>\" section. <br><br><br>&#10;&#10;&#10;&#10;<span style=\"font-size: 14pt; color: rgb(0, 112, 192);\"><a name=\"configuration_options\"></a></span><span style=\"font-size: 14pt; color: rgb(0, 112, 192);\"><big>\"0 - Settings\" Screen</big><br>&#10;&#10;</span>The first time you run AutoGrader 2, you will likely want to&#10;customize the program.&nbsp; Below is a description of the different&#10;configuration options.&#10;<br><br><span style=\"font-size: 14pt; color: rgb(0, 112, 192);\">Configuration&#10;Options</span>&#10;&#10;<ul><li><span style=\"font-weight: bold;\">Language</span> - The AutoGrader can grade&nbsp; Python and C++&#10;code.&nbsp; You may specify the language for the programs under test or&#10;you may let the AutoGrader automatically detect the language by&#10;selecting 'Auto'.&nbsp; This&nbsp; is the recommended setting.&nbsp; In&#10;'Auto' mode, it is possible to have mixed-language submissions, meaning&#10;that some students may submit their assignment in Python while others&#10;do so in C++.</li></ul>&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;<ul><li><span style=\"font-weight: bold;\">Max Run Time </span>- You may specify the maximum run-time for each&#10;submission.&nbsp; This is a safeguard against rogue programs that run&#10;an infinite loop, for example.&nbsp; The AutoGrader will kill any&#10;program that runs beyond the specified max run time.&nbsp; Setting this&#10;value to 0 disables the max run time check.&nbsp; This is not&#10;recommended.</li></ul>&#10;&#10;&#10;&#10;&#10;<ul><li><span style=\"font-weight: bold;\">Limit Output Lines</span> - You may limit the maximum number of output&#10;lines included in the final report for each program under test.&nbsp;&#10;&#10;&#10;&#10;&#10;This is a safeguard against runaway programs that generate mass output&#10;in an infinite loop.</li></ul>&#10;&#10;&#10;<ul><li><span style=\"font-weight: bold;\">Include Source Listing in Output </span>- Specify whether or not a&#10;listing of each source program file should be included in the final&#10;report.</li></ul>&#10;&#10;&#10;<ul><li><span style=\"font-weight: bold;\">Auto Uncompress</span> - Specify whether or not the AutoGrader should&#10;uncompress zip files.&nbsp; When multiple programming files are&#10;involved, they may be submitted as a compressed zip file. The&nbsp;&#10;&#10;&#10;AutoGrader can automatically uncompress these.&nbsp; If unsure, select&#10;'Yes'.</li></ul>&#10;&#10;&#10;&#10;&#10;<ul><li><span style=\"font-weight: bold;\">Process Recursively</span> - When compressed submissions are&#10;uncompressed, the program files may be located in a&#10;sub-directory.&nbsp; The AutoGrader can automatically search these&#10;subdirectories until a program file is found.&nbsp; If unsure, select&#10;'Yes'.</li></ul>&#10;&#10;&#10;&#10;&#10;<ul><li><span style=\"font-weight: bold;\">Python 3 Interpreter</span> -&#10;When first run, the AutoGrader wil attempt&#10;to automatically detect a suitable python 3 interpreter.&nbsp; If none&#10;is found, you will have to manually enter the path to the interpreter&#10;here.&nbsp; Also, if you have multiple Python interpreters installed,&#10;the selected interpreter is randomly selected.&nbsp; You may want to&#10;change the selected interpreter.<br>&#10;</li></ul>&#10;&#10;&#10;&#10;&#10;<ul><li><span style=\"font-weight: bold;\">C++ compiler </span>- When&#10;first run, the AutoGrader will attempt to&#10;automatically detect a suitable c++ compiler.&nbsp; If none is&#10;found, you will have to manually enter the path to a compiler&#10;here.&nbsp; If you do not have a c++ compiler installed and do not&#10;intend to grade c++ programs, you may leave this field blank.<br>&#10;</li></ul>&#10;&#10;&#10;<ul><li><span style=\"font-weight: bold;\">Shell Interpreter </span>- Programs are tested in a \"sandbox\" shell. &nbsp; By default, the shell /bin/bash is used.&nbsp; You may&#10;specify a different shell here.<br>&#10;&#10;&#10;&#10;&#10;  </li></ul>&#10;&#10;&#10;<p class=\"MsoNormal\">&nbsp;</p><br>&#10;<span style=\"font-size: 14pt; color: rgb(0, 112, 192);\"><big>\"1 - Input/Setup\" Screen</big><br></span>Under&#10;normal operations, you will spend your time on the \"1 - Input/Setup\"&#10;and \"2-Output\" screens only.&nbsp; Starting with the \"1 - Input/Setup\"&#10;screen, you must specify the TLD (top-level directory) of the&#10;uncompressed zip file downloaded from Moodle.&nbsp; This is the minimum&#10;requirement.&nbsp; Most likely, you will want to specify test data&#10;files and possibly data files.&nbsp; Once these are specified, click&#10;the \"Start\" button to begin autograding.&nbsp; Once the grading is&#10;completed, you will be automatically switched to the \"<a href=\"#output_screen\">2 - Output</a>\" screen.<br>&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;<br>&#10;<span style=\"font-size: 14pt; color: rgb(0, 112, 192);\">Test Data</span><br>&#10;For programs that require keyboard input, you must specify the inputs&#10;in a test data file.&nbsp; This file contains one line for each&#10;required input.&nbsp; So, if a program requies the user to enter 3&#10;integers, your test data file should contain 3 lines, each containing 1&#10;integer.<br>&#10;You may include multiple test cases in a single test data file by&#10;separating test cases with a double @&nbsp; (\"@@\")&nbsp; line.&nbsp;&#10;Using the example of a program that requires the user to enter 3&#10;integers, a test data file with the following contents would test the&#10;program using two different data sets:<br><br style=\"color: rgb(102, 102, 0);\"><span style=\"font-style: italic; color: rgb(102, 102, 0);\">12</span><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><span style=\"font-style: italic; color: rgb(102, 102, 0);\">72</span><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><span style=\"font-style: italic; color: rgb(102, 102, 0);\">2</span><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><span style=\"font-style: italic; color: rgb(102, 102, 0);\">@@</span><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><span style=\"font-style: italic; color: rgb(102, 102, 0);\">103</span><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><span style=\"font-style: italic; color: rgb(102, 102, 0);\">-3</span><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><span style=\"font-style: italic; color: rgb(102, 102, 0);\">44</span><br style=\"color: rgb(102, 102, 0);\"><br>Note that in the case above, the program would be executed twice, once for each test case.<br><br>The test data file is insensitive to blank lines.&nbsp; You may add&#10;these anywhere in the file.&nbsp; You may also add comments at the end&#10;of the file beyond the expected keyboard inputs.&nbsp; In our example,&#10;anything beyond the 3rd integer should be ignored by the program under&#10;test .&nbsp; However, be mindful that an ill-behaved program could interpret this as&#10;user input.&nbsp; For a well-behaved program, the following is an&#10;equivalent test data file:<br><br style=\"color: rgb(0, 102, 0);\"><span style=\"font-style: italic; color: rgb(102, 102, 0);\">12</span><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><span style=\"font-style: italic; color: rgb(102, 102, 0);\">72</span><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><span style=\"font-style: italic; color: rgb(102, 102, 0);\">2<br>This is a comment.&nbsp; It should have no effect on&#10;a program that reads only 3 integers.</span><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><span style=\"font-style: italic; color: rgb(102, 102, 0);\">@@<br style=\"font-style: italic;\">103</span><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><span style=\"font-style: italic; color: rgb(102, 102, 0);\">-3<br><br style=\"font-style: italic;\">44</span><br style=\"font-style: italic; color: rgb(102, 102, 0);\"><span style=\"font-style: italic;\"><span style=\"color: rgb(102, 102, 0);\">This is another comment.</span><br style=\"color: rgb(102, 102, 0);\"><span style=\"color: rgb(102, 102, 0);\">Note the blank lines in this test data files have no effect.</span><br></span>&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;<br>&#10;Note that specifying test data is optional.&nbsp; Some programs do not&#10;require user input.&nbsp; When test data is required, but not&#10;specified, the likely outcome is a \"max execution time exceeded\" error for each&#10;submission.<br>&#10;<br>&#10;&#10;<span style=\"font-size: 14pt; color: rgb(0, 112, 192);\">Data Files</span><br>&#10;&#10;&#10;Some programs need access to data files.&nbsp; In such cases, the&#10;data files should be specified here.&nbsp; Each data file will be&#10;copied to the working directory of each program when the program is&#10;executed.&nbsp; Note that the AutoGrader assumes that the data files to&#10;be accessed are in the same directory as the program under test.&nbsp;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;It is important that submitted programs make the same assumption unless&#10;the submitted program includes its own data files.<br><br><br><span style=\"font-size: 14pt; color: rgb(0, 112, 192);\"><big><a name=\"output_screen\"></a>\"2 - Output\" Screen</big><br>&#10;&#10;&#10;</span>Upon completion of the autograding process, you will be switched&#10;to the \"2 - Output\" screen.&nbsp; The main part of the screen will&#10;display the results of the grading process.&nbsp; You can add a grade&#10;and a comment to each submission.&nbsp; At the top of the screen, there&#10;is a navigation bar to help with navigating to a particular student's&#10;submission.&nbsp; At the bottom of the screen, is a button to save the&#10;grading results as well as the instructor comments to a file.&nbsp;&#10;AutoGrader 2 files have a .ag2 extension.&nbsp; You may also export the&#10;report to an HTML file.&nbsp; This is recommended as it allows you to&#10;review the grading using any web browser.&nbsp; You cannot update the&#10;grade in the exported HTML.&nbsp; A third button switches the main&#10;window to display a summary of student grades and instructor&#10;comments.&nbsp; Use this view to help with the transfer of grades back&#10;to Moodle.<br><br><br>&nbsp;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;<big><span style=\"font-size: 14pt; color: rgb(0, 112, 192);\"><a name=\"moodle_download_settings\"></a><big>Moodle Download&#10;Settings</big></span>&#10;</big><br>If the downloaded student submissions are not in&#10;individual&#10;folders under the top-level directory, follow the instructions below&#10;<br><ol><li><span style=\"font-family: &quot;Times New Roman&quot;; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;\"></span>Verify that you are using Moodle 3.1 or late<span style=\"font-family: &quot;Times New Roman&quot;; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;\"></span>r</li><li>Go to the assignment and click on 'View/grade all submissions'<span style=\"font-family: &quot;Times New Roman&quot;; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;\"></span></li><li><span style=\"font-family: &quot;Times New Roman&quot;; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;\">&nbsp;</span>Scroll to the very bottom of the page and verify that the&#10;'Download&#10;submissions in folders' option is checked.&nbsp; You will only need to do&#10;this once.&nbsp;&#10;&#10;&#10;&#10;Moodle will remember your choice.</li><li><span style=\"font-family: &quot;Times New Roman&quot;; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;\"></span>Now, under 'Grading action' select 'Download all submissions'.</li></ol><br>&#10;&#10;&#10;&#10;</div>&#10;</body></html>";



}



/* ======================================================================
 * To Do
 * Auto version incrementing
 * copy data files to submission folders
 * make a subdirectory in the TLD for extracted test files
 * clean up data files and extracted test files
 * ===================================================================== */


/* ======================================================================
 * xxx
 * ===================================================================== */

//----------  ----------
//----------  ----------
//----------  ----------
//----------  ----------
